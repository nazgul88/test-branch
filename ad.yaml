AWSTemplateFormatVersion: '2010-09-09'
Description: Relativity UK Environment custom ADConnector CloudFormation resource with Lambda.

Parameters:
  LambdaRuntime:
    Description: The Lambda runtime to use
    Type: String
    AllowedValues:
      - python2.7
      - python3.6
    Default: python2.7

  publicVPCStackName:
    Description: "CloudFormation VPC Stack Name"
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: "PeeringVPC"

  DirectoryServiceStackName:
    Description: "CloudFormation VPC Stack Name"
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  DomainDNSName:
    Description: " Fully qualified domain name (FQDN) of the forest root domain "
    Type: String

  DomainNetBiosName:
    Description: " Netbios name for the domain "
    Type: String

  DomainAdminUser :
    Description: "User name for the account that will be added as Domain Administrator. This is separate from the default Administrator account"
    Type: String
    Default: admin

  EnvironmentName:
    Description: " Drop in the value from the EnvironmentName variable"
    Type: String

  ClientPrefix:
    Description: " Client AWS Prefix (REL) "
    Type: String

  DomainAdminPassword:
    Description: " Credentials to join to the AD "
    Type: String
    NoEcho: true

  AdSize:
    Description: "AD Connector Size"
    Type: String
    Default: Small


Resources:
  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Ref DomainDNSName
      DomainNameServers: #!GetAtt DirectoryService.DnsIpAddresses
        - Fn::ImportValue:
             !Sub "${DirectoryServiceStackName}-PrimaryDnsIp"
        - Fn::ImportValue:
             !Sub "${DirectoryServiceStackName}-SecondaryDnsIp"
      Tags:
        - Key: Name
          Value: !Join [ ' ', [!Ref  ClientPrefix, 'PublicVPC-DHCPOptionsSet'] ]
        - Key: Environment
          Value:
            Ref: EnvironmentName

  DHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        Fn::ImportValue:
         !Sub "${publicVPCStackName}-VPCID"
      DhcpOptionsId:
        Ref: DhcpOptions

  # WaitHandle:
  #   Type: AWS::CloudFormation::WaitConditionHandle
  # WaitCondition:
  #   Type: AWS::CloudFormation::WaitCondition
  #   DependsOn: CustomFunction
  #   Properties:
  #     Handle:
  #       Ref: "WaitHandle"
  #     Timeout: "60"
  #     Count: 1

  CustomResource:
    DependsOn: CustomFunction
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref 'CustomFunction' #!ImportValue LambdaFunctionArn
      Name: !Ref DomainDNSName
      ShortName: !Ref DomainNetBiosName
      Password: !Ref DomainAdminPassword
      Description: Description of the ad
      Size: !Ref AdSize
      VpcId:
         Fn::ImportValue:
             !Sub "${publicVPCStackName}-VPCID"
      SubnetIds:
      - Fn::ImportValue:
          !Sub "${publicVPCStackName}-Workspaces-Subnet-AZ1"
      - Fn::ImportValue:
          !Sub "${publicVPCStackName}-Workspaces-Subnet-AZ2"
      CustomerDnsIps:
        - Fn::ImportValue:
             !Sub "${DirectoryServiceStackName}-PrimaryDnsIp"
        - Fn::ImportValue:
             !Sub "${DirectoryServiceStackName}-SecondaryDnsIp"
      CustomerUserName: !Ref DomainAdminUser

  CustomFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
                import boto3
                import json
                import logging
                import signal
                from urllib2 import build_opener, HTTPHandler, Request

                LOGGER = logging.getLogger()
                LOGGER.setLevel(logging.INFO)

                def handler(event, context):
                    signal.alarm((context.get_remaining_time_in_millis() / 1000) - 1)
                    try:
                        LOGGER.info('REQUEST RECEIVED:\n %s', event)
                        LOGGER.info('REQUEST RECEIVED:\n %s', context)
                        if event['RequestType'] == 'Create':
                            LOGGER.info('CREATE!')
                            adname = event["ResourceProperties"]["Name"]
                            short_name = event["ResourceProperties"]["ShortName"]
                            passwd = event["ResourceProperties"]["Password"]
                            #desc = event["ResourceProperties"]["Description"]
                            ad_size = event["ResourceProperties"]["Size"]
                            vpc_id = event["ResourceProperties"]["VpcId"]
                            cust_dns = event["ResourceProperties"]["CustomerDnsIps"]
                            cust_user = event["ResourceProperties"]["CustomerUserName"]
                            subnets = event["ResourceProperties"]["SubnetIds"]
                            ad_creation(adname, short_name, ad_size, vpc_id, cust_dns, cust_user, subnets, passwd)
                            send_response(event, context, "SUCCESS",
                                          {"Message": "Resource creation successful!"})
                        elif event['RequestType'] == 'Update':
                            LOGGER.info('UPDATE!')
                            send_response(event, context, "SUCCESS",
                                          {"Message": "Resource update successful!"})
                        elif event['RequestType'] == 'Delete':
                            LOGGER.info('DELETE!')
                            delname = event['ResourceProperties']["Name"]
                            LOGGER.info(delname)
                            ad_deletion(delname)
                            send_response(event, context, "SUCCESS",
                                          {"Message": "Resource deletion successful!"})
                        else:
                            LOGGER.info('FAILED!')
                            send_response(event, context, "FAILED",
                                          {"Message": "Unexpected event received from CloudFormation"})
                    except: #pylint: disable=W0702
                        LOGGER.info('FAILED!')
                        send_response(event, context, "FAILED", {
                            "Message": "Exception during processing"})

                def send_response(event, context, response_status, response_data):
                    response_body = json.dumps({
                        "Status": response_status,
                        "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
                        "PhysicalResourceId": context.log_stream_name,
                        "StackId": event['StackId'],
                        "RequestId": event['RequestId'],
                        "LogicalResourceId": event['LogicalResourceId'],
                        "Data": response_data
                    })

                    LOGGER.info('ResponseURL: %s', event['ResponseURL'])
                    LOGGER.info('ResponseBody: %s', response_body)

                    opener = build_opener(HTTPHandler)
                    request = Request(event['ResponseURL'], data=response_body)
                    request.add_header('Content-Type', '')
                    request.add_header('Content-Length', len(response_body))
                    request.get_method = lambda: 'PUT'
                    response = opener.open(request)
                    LOGGER.info("Status code: %s", response.getcode())
                    LOGGER.info("Status message: %s", response.msg)

                def ad_creation(ad_name, shname, adsize, vpcid, custdns, custuser, subnetids, passw):
                    client = boto3.client('ds')
                    response = client.connect_directory(
                        Name=ad_name,
                        ShortName=shname,
                        Password=passw,
                        Description="AD Connector",
                        Size=adsize,
                        ConnectSettings={
                            'VpcId': vpcid,
                            'SubnetIds': subnetids,
                            'CustomerDnsIps': custdns,
                            'CustomerUserName': custuser
                        },
                    )

                def ad_deletion(ad_name):
                    client = boto3.client('ds')
                    response = client.describe_directories()
                    for i in response['DirectoryDescriptions']:
                        if i['Name'] == ad_name and i['Type'] == 'ADConnector':
                            response = client.delete_directory(
                                DirectoryId = i['DirectoryId']
                            )

                def timeout_handler(_signal, _frame):
                    raise Exception('Time exceeded')
                signal.signal(signal.SIGALRM, timeout_handler)

      FunctionName: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${EnvironmentName}-ad-connector'
      Handler: index.handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: !Ref 'LambdaRuntime'
      Timeout: '80'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: lambda-execution-role
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                Resource: '*'
              - Effect: Allow
                Action:
                  - ds:DeleteDirectory
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteSecurityGroup
                  - ec2:DeleteNetworkInterface
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                  - ec2:DeleteTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - ds:ConnectDirectory
                  - ds:DescribeDirectories
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:CreateSecurityGroup
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:CreateTags
                Resource: '*'

# Outputs:
#   CustomFunctionArn:
#     Description: The arn of the custom resource function.
#     Value:
#       !GetAtt 'CustomFunction.Arn'
#     Export:
#       Name: LambdaFunctionArn
